"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 3.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-qg!+&mkib#*^%-4edsrxwbly@^%l0ab96^cnc5jtltglh@t_n^'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition
'''
   1. pip install django 등록
   2. 장고가 동작할 수 있는 시스템 
      django-admin startproject config .(현재 폴더)  => manage.py
   3. 필요한 라이브러리 설치 
      pip install cx_Oracle , pip install BeautifulSoup  ==> 아나콘다 , 판다스 (ai)
   4. 앱을 만드는 환경 설정 (클라이언트)
      python manage.py(명령어가 실행이 가능하게 만들어주는 파일) startapp boardapp
      기타) python manage.py migrate : 데이터베이스 초기화 (연결여부)
             python manage.py makemigrations :  Model을 등록하면 자동으로 테이블을 생성 
             python manage.py createsuperuser : 관리자 계정 만들때 사용 
    5. python manage.py runserver 서버 가동  
    6. 장고의 기본 포트 (8000) => 포토변경도 가능하다 
    
    ==================
    셋팅 
    settings.py : 현재 프로젝트 등록(INSTALLED_APPS) , 데이터베이스 등록 (DATABASES) => application-context.xml
    urls.py : 화면이동 (경로) =DispatcherServlet => web.xml
    models.py : DataBase연결, Web=데이터를 수집해서 저장 (DAO)
    views.py : 화면 변경 , 데이터를 HTML로 보내주는 역할 (@Controller)
    
    동작 
                        request                     데이터베이스 연결
     사용자 요청 =======> views.py  <=========> models.py
                                               요청 결과값을 받는다
                                        |
                                    html 전송 => render(request,'받을 파일명',전송할 데이터) , 화면만 변경 (redirect) => 사용자 브라우저에서 읽어 간다
                                    (Template) 
                                    MVT
                                    
                                    HTML => 자바 ( <% %> , <%= %>, <%! %> )
                                             => 파이썬 ( {% %} , {{}} , static)
                                                  {% for 변수 in 컬렉션 %}   <%  for() { %>  <% } %>
                                                  {% endfor %}
                                                  =============
                                                  {% if 조건문 %} 
                                                  {% endif %}
                                                  {% if 조건문 %}
                                                  {% elif 조건문 %}
                                                  {% elif 조건문 %}
                                                  {% else %}
                                                  {% endif %}
                                                  =============
                                                  {% block %}
                                                  {% endblock %}
                                                  {% include '파일명' %}
                                                  {{}} => 연산처리가 없다  => filter사용 
                                                  {{값|add:-1,1}}, {{값|truncatewords:30}}
                                => 사용자 요청값 받기 
                                     request.GET['name명']    ?no=10  => request.GET['no']
                                     <input type=text name=id>  request.POST['id'] 
                                    
     def boardList(request):
'''
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'boardapp'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
